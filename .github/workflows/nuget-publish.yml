# .github/workflows/dotnet-ci.yml
name: Build, Test, Benchmark and Publish NuGet Package

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'
          
      - name: Restore
        run: dotnet restore
      
      - name: Build
        run: dotnet build --no-restore --configuration Release    

      - name: Test and Collect Coverage
        run: dotnet test tests/SteamId.Net.Tests/SteamId.Net.Tests.csproj --no-build --configuration Release --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=lcov
        
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
        
      - name: Generate Coverage Report
        run: reportgenerator -reports:tests/SteamId.Net.Tests/coverage.info -targetdir:coveragereport -reporttypes:MarkdownSummaryGithub;Badges
        
      - name: Append coverage to README
        run: |
          echo "## Code Coverage" >> README.md
          cat coveragereport/SummaryGithub.md >> README.md
  
  
  
  
  benchmark:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build -c Release
      - name: Run Benchmarks
        run: dotnet run --project benchmarks/SteamId.Net.Benchmark/SteamId.Net.Benchmark.csproj -c Release -- --filter * --join

  publish:
    name: Publish NuGet Package
    runs-on: ubuntu-latest
    needs: [test, benchmark]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release

      - name: Pack with tag version
        run: dotnet pack -c Release -p:PackageVersion=${{ env.VERSION }} -o out

      - name: Push to NuGet
        run: dotnet nuget push "out/*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
